
" Tabs as 4 spaces and auto indentation
set expandtab
set shiftwidth=4
set softtabstop=4
filetype plugin indent on

" Powerline fonts sudo apt install fonts-powerline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1 

" Show line numbers
set number
set background=dark
let g:airline_theme="gruvbox"
"let g:airline_solarized_bg='dark'
let g:gruvbox_termcolors=256

" Disable weird backspace
set backspace=indent,eol,start
set term=xterm-256color

" Map Ctrl + left/right to switch tabs
" map <C-Left> <Esc>:tabprev<CR>
" map <C-Right> <Esc>:tabnext<CR>
" Map Ctrl + N to new tab
" map <C-n> <Esc>:tabnew<space>

" Map Ctrl + left/right to switch buffers
map <C-Left> <Esc>:bp<CR>
map <C-Right> <Esc>:bn<CR>
" Map Ctrl + N to new buffer
map <C-n> <Esc>:edit<space> 

" Plugins
call plug#begin()
" Airline themes
Plug 'vim-airline/vim-airline'                                                                                                                                                                          
Plug 'vim-airline/vim-airline-themes'
" Colorschemes
Plug 'flazz/vim-colorschemes'
Plug 'morhetz/gruvbox'
" Auto-completion plugin
Plug 'Valloric/YouCompleteMe'
" Auto brace matching
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/lh-style'
Plug 'LucHermitte/lh-brackets'
call plug#end()

" Don't insert placeholder for brace matching
let b:usemarks  = 0

colorscheme Chasing_Logic

" Don't confirm extra YCM conf file
let g:ycm_confirm_extra_conf = 0

set tabline=%!MyTabLine()  " custom tab pages line
function! MyTabLine()
    let s = '' " complete tabline goes here
    " loop through each tab page
    for t in range(tabpagenr('$'))
        " set highlight
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " set the tab page number (for mouse clicks)
        let s .= '%' . (t + 1) . 'T'
        let s .= ' '
        " set page number string
        let s .= t + 1 . ' '
        " get buffer names and statuses
        let n = ''      "temp string for buffer names while we loop and check buftype
        let m = 0       " &modified counter
        let bc = len(tabpagebuflist(t + 1))     "counter to avoid last ' '
        " loop through each buffer in a tab
        for b in tabpagebuflist(t + 1)
            " buffer types: quickfix gets a [Q], help gets [H]{base fname}
            " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
            if getbufvar( b, "&buftype" ) == 'help'
                let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
            elseif getbufvar( b, "&buftype" ) == 'quickfix'
                let n .= '[Q]'
            else
                let n .= pathshorten(bufname(b))
            endif
            " check and ++ tab's &modified count
            if getbufvar( b, "&modified" )
                let m += 1
            endif
            " no final ' ' added...formatting looks better done later
            if bc > 1
                let n .= ' '
            endif
            let bc -= 1
        endfor
        " add modified label [n+] where n pages in tab are modified
        if m > 0
            let s .= '[' . m . '+]'
        endif
        " select the highlighting for the buffer names
        " my default highlighting only underlines the active tab
        " buffer names.
        if t + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif
        " add buffer names
        if n == ''
            let s.= '[New]'
        else
            let s .= n
        endif
        " switch to no underlining and add final space to buffer list
        let s .= ' '
    endfor
    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'
    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLineFill#%999Xclose'
    endif
    return s
endfunction
